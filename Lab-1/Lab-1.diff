diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/devices/shutdown.c Pintos/src/devices/shutdown.c
--- Downloads/pintos/src/devices/shutdown.c	2012-09-27 06:08:29.000000000 +0530
+++ Pintos/src/devices/shutdown.c	2019-01-11 11:17:14.304000000 +0530
@@ -99,6 +99,14 @@
   printf ("Powering off...\n");
   serial_flush ();
 
+  /* ACPI Shutdown sequence supported by Bochs and QEMU
+     http://forum.osdev.org/viewtopic.php?t=16990 */
+  outw( 0x604, 0x0 | 0x2000 );
+
+  /* Newer QEMU doesn't support old power-off sequence. Use ACPI
+     shutdown. */
+  outw (0xB004, 0x2000);
+
   /* This is a special power-off sequence supported by Bochs and
      QEMU, but not by physical hardware. */
   for (p = s; *p != '\0'; p++)
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/devices/timer.c Pintos/src/devices/timer.c
--- Downloads/pintos/src/devices/timer.c	2012-09-27 06:08:29.000000000 +0530
+++ Pintos/src/devices/timer.c	2019-02-03 17:22:02.548000000 +0530
@@ -7,6 +7,7 @@
 #include "threads/interrupt.h"
 #include "threads/synch.h"
 #include "threads/thread.h"
+#include "threads/fixed-point.h"
   
 /* See [8254] for hardware details of the 8254 timer chip. */
 
@@ -90,10 +91,11 @@
 timer_sleep (int64_t ticks) 
 {
   int64_t start = timer_ticks ();
-
+  
   ASSERT (intr_get_level () == INTR_ON);
-  while (timer_elapsed (start) < ticks) 
-    thread_yield ();
+  enum intr_level old_level = intr_disable ();
+  thread_blocked_list (thread_current (), start, ticks);
+  intr_set_level (old_level);
 }
 
 /* Sleeps for approximately MS milliseconds.  Interrupts must be
@@ -172,6 +174,21 @@
 {
   ticks++;
   thread_tick ();
+  thread_wakeup (); 
+  if (thread_mlfqs)
+  {
+    struct thread *cur = thread_current ();
+    if (cur != get_idle_thread ())
+      cur->recent_cpu = ADD_FP_INT (cur->recent_cpu, 1);       
+    
+    if (timer_ticks () % TIMER_FREQ == 0)
+    { 
+      thread_set_load_avg ();
+      thread_set_recent_cpu ();
+    }
+    if (timer_ticks () % 4 == 0)
+      thread_recalculate_priority (false);
+  }
 }
 
 /* Returns true if LOOPS iterations waits for more than one timer
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/threads/fixed-point.h Pintos/src/threads/fixed-point.h
--- Downloads/pintos/src/threads/fixed-point.h	1970-01-01 05:30:00.000000000 +0530
+++ Pintos/src/threads/fixed-point.h	2019-02-02 14:18:42.080000000 +0530
@@ -0,0 +1,21 @@
+#ifndef THREADS_FIXED_POINT_H
+#define THREADS_FIXED_POINT_H
+
+#include <stdint.h>
+
+static int _f = 1 << 14;
+
+#define CONVERT_N_TO_FP(n)   (n * _f)
+#define CONVERT_X_TO_INT_RTZ(x) (x / _f)
+#define CONVERT_X_TO_INT_RTN(x) ( (x >= 0) ? ((x + (_f / 2)) / _f) : ((x - (_f / 2)) / _f) )
+#define ADD_FP_FP(x, y) (x + y)
+#define SUB_FP_FP(x, y) (x - y)
+#define ADD_FP_INT(x, n) (x + (n * _f))
+#define SUB_FP_INT(x, n) (x - (n * _f))
+#define MUL_FP_FP(x, y) (((int64_t) x) * y / _f)
+#define MUL_FP_INT(x, n) (x * n)
+#define DIV_FP_FP(x, y) (((int64_t) x) * _f / y)
+#define DIV_FP_INT(x, n) (x / n) 
+#define MAX(x, y) (x > y ? x : y)
+
+#endif
\ No newline at end of file
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/threads/Make.vars Pintos/src/threads/Make.vars
--- Downloads/pintos/src/threads/Make.vars	2012-09-27 06:08:37.000000000 +0530
+++ Pintos/src/threads/Make.vars	2019-01-11 10:50:24.972000000 +0530
@@ -4,4 +4,4 @@
 KERNEL_SUBDIRS = threads devices lib lib/kernel $(TEST_SUBDIRS)
 TEST_SUBDIRS = tests/threads
 GRADING_FILE = $(SRCDIR)/tests/threads/Grading
-SIMULATOR = --bochs
+SIMULATOR = --qemu
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/threads/synch.c Pintos/src/threads/synch.c
--- Downloads/pintos/src/threads/synch.c	2012-09-27 06:08:38.000000000 +0530
+++ Pintos/src/threads/synch.c	2019-02-05 19:17:15.048000000 +0530
@@ -101,6 +101,18 @@
   return success;
 }
 
+bool
+sema_priority_insert_compare_func (const struct list_elem *a, 
+                          const struct list_elem *b,
+                          void *aux)
+{
+  struct thread *new_thread = list_entry (a, struct thread, elem);
+  struct thread *list_thread = list_entry (b, struct thread, elem);
+  if (new_thread->priority <= list_thread->priority )
+      return false;
+  return true;
+}
+
 /* Up or "V" operation on a semaphore.  Increments SEMA's value
    and wakes up one thread of those waiting for SEMA, if any.
 
@@ -113,10 +125,13 @@
   ASSERT (sema != NULL);
 
   old_level = intr_disable ();
+  sema->value++;
   if (!list_empty (&sema->waiters)) 
+  { 
+    list_sort (&sema->waiters, sema_priority_insert_compare_func, NULL);
     thread_unblock (list_entry (list_pop_front (&sema->waiters),
                                 struct thread, elem));
-  sema->value++;
+  }
   intr_set_level (old_level);
 }
 
@@ -196,8 +211,15 @@
   ASSERT (!intr_context ());
   ASSERT (!lock_held_by_current_thread (lock));
 
+  struct thread *cur = thread_current ();
+  if (lock->holder != NULL)
+  {
+    thread_donate_priority (cur, lock);  
+  }
+
   sema_down (&lock->semaphore);
   lock->holder = thread_current ();
+  
 }
 
 /* Tries to acquires LOCK and returns true if successful or false
@@ -230,9 +252,11 @@
 {
   ASSERT (lock != NULL);
   ASSERT (lock_held_by_current_thread (lock));
-
+  
+  thread_release_donated_priority (lock);
   lock->holder = NULL;
   sema_up (&lock->semaphore);
+  thread_yield ();
 }
 
 /* Returns true if the current thread holds LOCK, false
@@ -317,8 +341,29 @@
   ASSERT (lock_held_by_current_thread (lock));
 
   if (!list_empty (&cond->waiters)) 
-    sema_up (&list_entry (list_pop_front (&cond->waiters),
-                          struct semaphore_elem, elem)->semaphore);
+  {
+    struct semaphore *max_sema = NULL;
+    struct thread *max_thread = NULL;
+    struct condition *max_cond = NULL;
+    struct list_elem *e;
+    
+    for (e = list_begin (&cond->waiters); e != list_end (&cond->waiters);
+        e = list_next (e))
+      {
+        struct semaphore *sema = &(list_entry (e, struct semaphore_elem, elem)->semaphore);
+        struct thread *t = list_entry (list_begin (&sema->waiters), struct thread, elem);
+        if (max_thread == NULL)
+        {
+          max_thread = t; max_sema = sema; max_cond = e;
+        }
+        else if(max_thread->priority < t->priority)
+        {
+          max_thread = t; max_sema = sema; max_cond = e;
+        }
+      }
+    list_remove (&max_cond->waiters);
+    sema_up (max_sema);
+  }
 }
 
 /* Wakes up all threads, if any, waiting on COND (protected by
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/threads/synch.h Pintos/src/threads/synch.h
--- Downloads/pintos/src/threads/synch.h	2012-09-27 06:08:38.000000000 +0530
+++ Pintos/src/threads/synch.h	2019-01-27 14:58:09.752000000 +0530
@@ -17,6 +17,10 @@
 void sema_up (struct semaphore *);
 void sema_self_test (void);
 
+#define lock_entry(SEMAPHORE, STRUCT, MEMBER)           \
+        ((STRUCT *) ((uint8_t *) &(SEMAPHORE)->value     \
+                     - offsetof (STRUCT, MEMBER.value)))
+
 /* Lock. */
 struct lock 
   {
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/threads/thread.c Pintos/src/threads/thread.c
--- Downloads/pintos/src/threads/thread.c	2012-09-27 06:08:38.000000000 +0530
+++ Pintos/src/threads/thread.c	2019-02-05 19:16:48.696000000 +0530
@@ -14,6 +14,7 @@
 #ifdef USERPROG
 #include "userprog/process.h"
 #endif
+#include "fixed-point.h"
 
 /* Random value for struct thread's `magic' member.
    Used to detect stack overflow.  See the big comment at the top
@@ -28,6 +29,8 @@
    when they are first scheduled and removed when they exit. */
 static struct list all_list;
 
+static struct list sleeping_list;
+
 /* Idle thread. */
 static struct thread *idle_thread;
 
@@ -70,7 +73,7 @@
 static void schedule (void);
 void thread_schedule_tail (struct thread *prev);
 static tid_t allocate_tid (void);
-
+static int64_t load_avg;
 /* Initializes the threading system by transforming the code
    that's currently running into a thread.  This can't work in
    general and it is possible in this case only because loader.S
@@ -92,12 +95,14 @@
   lock_init (&tid_lock);
   list_init (&ready_list);
   list_init (&all_list);
-
+  list_init (&sleeping_list);
+  
   /* Set up a thread structure for the running thread. */
   initial_thread = running_thread ();
   init_thread (initial_thread, "main", PRI_DEFAULT);
   initial_thread->status = THREAD_RUNNING;
   initial_thread->tid = allocate_tid ();
+  load_avg = CONVERT_N_TO_FP(0);
 }
 
 /* Starts preemptive thread scheduling by enabling interrupts.
@@ -208,10 +213,37 @@
 
   /* Add to run queue. */
   thread_unblock (t);
-
   return tid;
 }
 
+void 
+thread_priority_preempty (void)
+{
+  
+  struct thread *list_thread = list_entry (list_begin (&ready_list), struct thread, elem);
+  struct thread *cur_thread = thread_current ();
+  if (cur_thread != idle_thread && list_thread != idle_thread &&
+      list_thread->priority > cur_thread->priority && !thread_mlfqs)
+  {
+      thread_yield ();
+  }
+}
+
+void 
+thread_wakeup (void)
+{
+  struct list_elem *e;
+  for (e = list_begin (&sleeping_list); e != list_end (&sleeping_list);
+       e = list_next (e))
+  {
+    struct thread *t = list_entry (e, struct thread, sleepingelem);
+    if (timer_elapsed (t->timer) < 0)
+      break;
+    list_pop_front (&sleeping_list);
+    thread_unblock (t);
+  }
+}
+
 /* Puts the current thread to sleep.  It will not be scheduled
    again until awoken by thread_unblock().
 
@@ -245,9 +277,30 @@
 
   old_level = intr_disable ();
   ASSERT (t->status == THREAD_BLOCKED);
-  list_push_back (&ready_list, &t->elem);
+  list_insert_ordered (&ready_list, &t->elem, thread_priority_insert_compare_func, NULL);
   t->status = THREAD_READY;
   intr_set_level (old_level);
+  thread_priority_preempty ();                     
+}
+
+bool
+thread_alarm_insert_func (const struct list_elem *a, 
+                          const struct list_elem *b,
+                          void *aux)
+{
+  struct thread *t1 = list_entry (a, struct thread, sleepingelem);
+  struct thread *t2 = list_entry (b, struct thread, sleepingelem);
+  if (t1->timer >=   t2->timer)
+      return false;
+  return true;
+}                        
+
+void
+thread_blocked_list (struct thread *t, int64_t start, int64_t ticks)
+{
+  t->timer = start + ticks;
+  list_insert_ordered (&sleeping_list, &t->sleepingelem, thread_alarm_insert_func, NULL);
+  thread_block ();
 }
 
 /* Returns the name of the running thread. */
@@ -304,6 +357,20 @@
   NOT_REACHED ();
 }
 
+/* <= ensure that round robin is followed for
+   threads which have same priority level.
+*/
+bool
+thread_priority_insert_compare_func (const struct list_elem *a, 
+                          const struct list_elem *b,
+                          void *aux)
+{
+  struct thread *new_thread = list_entry (a, struct thread, elem);
+  struct thread *list_thread = list_entry (b, struct thread, elem);
+  if (new_thread->priority <= list_thread->priority )
+      return false;
+  return true;
+}
 /* Yields the CPU.  The current thread is not put to sleep and
    may be scheduled again immediately at the scheduler's whim. */
 void
@@ -316,7 +383,7 @@
 
   old_level = intr_disable ();
   if (cur != idle_thread) 
-    list_push_back (&ready_list, &cur->elem);
+    list_insert_ordered (&ready_list, &cur->elem, thread_priority_insert_compare_func, NULL);
   cur->status = THREAD_READY;
   schedule ();
   intr_set_level (old_level);
@@ -339,11 +406,104 @@
     }
 }
 
+
+void 
+thread_donate_priority (struct thread *cur, struct lock *lock)
+{
+  cur->blockedonlock = lock;
+  list_insert_ordered (&lock->holder->locked_list, &cur->lockedelem, thread_priority_insert_compare_func, NULL);
+
+  while (cur != NULL && lock != NULL && lock->holder != NULL)
+  {
+    if (lock->holder->priority < cur->priority)
+    {
+      lock->holder->priority = cur->priority;
+    }
+    
+    cur = lock->holder;
+    lock = cur->blockedonlock;
+    if (cur == NULL || lock == NULL || cur->blockedonlock == NULL || lock->holder == NULL)
+      return;
+  }
+}
+
+void 
+thread_release_donated_priority (struct lock *lock)
+{
+  struct thread *cur = thread_current ();
+  struct list_elem *e;
+  for (e = list_begin (&cur->locked_list); e != list_end (&cur->locked_list);
+       e = list_next (e))
+  {
+    struct thread *t = list_entry (e, struct thread, lockedelem);
+    if (t->blockedonlock == lock)
+      list_remove (&t->lockedelem);
+  }
+  cur->priority = cur->old_priority;
+  if (!list_empty (&cur->locked_list))
+  {
+    struct thread *tmp = list_entry (list_begin(&cur->locked_list), struct thread, lockedelem);
+    if (cur->priority < tmp->priority)
+      cur->priority = tmp->priority;
+  }  
+}
+
+void
+update_priority (struct thread *cur, void *aux)
+{
+  // priority = PRI_MAX - (recent_cpu / 4) - (nice * 2),
+  if (cur != idle_thread)
+  {
+    int64_t tmp1 = CONVERT_N_TO_FP (PRI_MAX);
+    int64_t tmp2 = DIV_FP_INT (cur->recent_cpu, 4);
+    tmp1 = SUB_FP_FP (tmp1, tmp2);
+    tmp2 = MUL_FP_INT (CONVERT_N_TO_FP(cur->nice), 2);
+    tmp1 = SUB_FP_FP (tmp1, tmp2);
+    tmp1 = CONVERT_X_TO_INT_RTN(tmp1);
+    if (tmp1 < 0)
+      tmp1 = PRI_MIN;
+    else if (tmp1 > PRI_MAX)
+      tmp1 = PRI_MAX;
+    cur->old_priority = tmp1;
+    cur->priority = tmp1;
+  }
+}
+bool
+thread_priority_sort_compare_func (const struct list_elem *a, 
+                          const struct list_elem *b,
+                          void *aux)
+{
+  struct thread *new_thread = list_entry (a, struct thread, elem);
+  struct thread *list_thread = list_entry (b, struct thread, elem);
+  if (new_thread->priority <= list_thread->priority )
+      return false;
+  return true;
+}
+void 
+thread_recalculate_priority (bool status)
+{
+  enum intr_level old_level = intr_disable ();
+  thread_foreach (update_priority, NULL);
+  list_sort(&ready_list, thread_priority_sort_compare_func, NULL);
+  intr_set_level (old_level);
+}
+
 /* Sets the current thread's priority to NEW_PRIORITY. */
 void
 thread_set_priority (int new_priority) 
 {
-  thread_current ()->priority = new_priority;
+  if (!thread_mlfqs)
+  {
+    enum intr_level old_level = intr_disable ();
+    struct thread *cur = thread_current ();
+    if (cur->priority > new_priority && list_empty (&cur->locked_list))
+    {
+      cur->priority = new_priority;
+    }
+    cur->old_priority = new_priority;
+    intr_set_level (old_level);
+    thread_yield ();
+  }
 }
 
 /* Returns the current thread's priority. */
@@ -355,33 +515,67 @@
 
 /* Sets the current thread's nice value to NICE. */
 void
-thread_set_nice (int nice UNUSED) 
+thread_set_nice (int nice) 
 {
-  /* Not yet implemented. */
+  struct thread *cur = thread_current ();
+  cur->nice = nice;
+  thread_recalculate_priority (true);
 }
 
 /* Returns the current thread's nice value. */
 int
 thread_get_nice (void) 
 {
-  /* Not yet implemented. */
-  return 0;
+  return thread_current ()->nice;
+}
+
+void
+thread_set_load_avg (void)
+{
+  // load_avg = (59/60)*load_avg + (1/60)*ready_threads,
+  int64_t fraction1 = DIV_FP_INT (CONVERT_N_TO_FP (59), 60);
+  int64_t fraction2 = DIV_FP_INT (CONVERT_N_TO_FP (1), 60);
+  int64_t tmp1 = MUL_FP_FP (fraction1, load_avg);
+  int64_t ready_size = list_size (&ready_list);
+  if (thread_current () != idle_thread)
+    ready_size += 1;
+  int64_t tmp2 = MUL_FP_INT (fraction2, ready_size);
+  load_avg = ADD_FP_FP (tmp1, tmp2);
 }
 
 /* Returns 100 times the system load average. */
 int
 thread_get_load_avg (void) 
 {
-  /* Not yet implemented. */
-  return 0;
+  return CONVERT_X_TO_INT_RTN (MUL_FP_INT (load_avg, 100));
+}
+
+void
+update_recent_cpu (struct thread *cur, void *aux)
+{
+  // recent_cpu = (2*load_avg)/(2*load_avg + 1) * recent_cpu + nice
+  if (cur != idle_thread)
+  {
+    int64_t tmp1 = MUL_FP_INT (load_avg, 2);
+    int64_t tmp2 = DIV_FP_FP (tmp1, ADD_FP_INT (MUL_FP_INT (load_avg, 2), 1));
+    tmp2 = MUL_FP_FP (tmp2, cur->recent_cpu);
+    cur->recent_cpu = ADD_FP_INT (tmp2, cur->nice);
+  }
+}
+
+void 
+thread_set_recent_cpu (void)
+{
+  enum intr_level old_level = intr_disable ();
+  thread_foreach (update_recent_cpu, NULL);
+  intr_set_level (old_level);
 }
 
 /* Returns 100 times the current thread's recent_cpu value. */
 int
 thread_get_recent_cpu (void) 
 {
-  /* Not yet implemented. */
-  return 0;
+  return CONVERT_X_TO_INT_RTN (MUL_FP_INT (thread_current ()->recent_cpu, 100));
 }
 
 /* Idle thread.  Executes when no other thread is ready to run.
@@ -469,7 +663,13 @@
   t->stack = (uint8_t *) t + PGSIZE;
   t->priority = priority;
   t->magic = THREAD_MAGIC;
-  list_push_back (&all_list, &t->allelem);
+  list_init (&t->locked_list);
+  t->old_priority = priority;
+  t->blockedonlock = NULL;
+  t->nice = 0;
+  t->recent_cpu = CONVERT_N_TO_FP(0);
+  t->timer = 0;
+  list_insert_ordered (&all_list, &t->allelem, thread_priority_insert_compare_func, NULL);
 }
 
 /* Allocates a SIZE-byte frame at the top of thread T's stack and
@@ -582,6 +782,11 @@
   return tid;
 }
 
+struct thread
+*get_idle_thread (void)
+{
+  return idle_thread;
+}
 /* Offset of `stack' member within `struct thread'.
    Used by switch.S, which can't figure it out on its own. */
 uint32_t thread_stack_ofs = offsetof (struct thread, stack);
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/threads/thread.h Pintos/src/threads/thread.h
--- Downloads/pintos/src/threads/thread.h	2012-09-27 06:08:38.000000000 +0530
+++ Pintos/src/threads/thread.h	2019-02-05 15:03:03.144000000 +0530
@@ -92,7 +92,20 @@
 
     /* Shared between thread.c and synch.c. */
     struct list_elem elem;              /* List element. */
-
+    
+    //Alarm clock
+    struct list_elem sleepingelem;       
+    int64_t  timer;
+
+    //Priority Scheduling
+    struct lock *blockedonlock;
+    int old_priority;
+    struct list locked_list;
+    struct list_elem lockedelem;      
+    
+    //Mlfq
+    int64_t nice;
+    int64_t recent_cpu;
 #ifdef USERPROG
     /* Owned by userprog/process.c. */
     uint32_t *pagedir;                  /* Page directory. */
@@ -116,26 +129,40 @@
 typedef void thread_func (void *aux);
 tid_t thread_create (const char *name, int priority, thread_func *, void *);
 
+void thread_priority_preempty (void);
+void thread_wakeup (void);
 void thread_block (void);
 void thread_unblock (struct thread *);
+bool thread_alarm_insert_func (const struct list_elem *a,
+                               const struct list_elem *b, void *aux);
+void thread_blocked_list(struct thread *t, int64_t start, int64_t ticks);
+struct thread *thread_pick_max_priority (void);
 
 struct thread *thread_current (void);
 tid_t thread_tid (void);
 const char *thread_name (void);
 
 void thread_exit (void) NO_RETURN;
+bool thread_priority_insert_compare_func (const struct list_elem *a,
+                               const struct list_elem *b, void *aux);
 void thread_yield (void);
 
 /* Performs some operation on thread t, given auxiliary data AUX. */
 typedef void thread_action_func (struct thread *t, void *aux);
 void thread_foreach (thread_action_func *, void *);
 
+void thread_donate_priority (struct thread *cur, struct lock *lock);
+void thread_release_donated_priority (struct lock *lock);
 int thread_get_priority (void);
+void thread_recalculate_priority (bool status);
 void thread_set_priority (int);
 
 int thread_get_nice (void);
 void thread_set_nice (int);
+void thread_set_recent_cpu (void);
 int thread_get_recent_cpu (void);
+void thread_set_load_avg (void);
 int thread_get_load_avg (void);
+struct thread *get_idle_thread(void);
 
 #endif /* threads/thread.h */
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/utils/Makefile Pintos/src/utils/Makefile
--- Downloads/pintos/src/utils/Makefile	2012-09-27 06:08:38.000000000 +0530
+++ Pintos/src/utils/Makefile	2019-01-11 10:46:53.204000000 +0530
@@ -2,7 +2,7 @@
 
 CC = gcc
 CFLAGS = -Wall -W
-LDFLAGS = -lm
+LDLIBS = -lm
 setitimer-helper: setitimer-helper.o
 squish-pty: squish-pty.o
 squish-unix: squish-unix.o
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/utils/pintos Pintos/src/utils/pintos
--- Downloads/pintos/src/utils/pintos	2012-09-27 06:08:38.000000000 +0530
+++ Pintos/src/utils/pintos	2019-01-11 11:13:34.420000000 +0530
@@ -100,7 +100,7 @@
 	  or exit 1;
     }
 
-    $sim = "bochs" if !defined $sim;
+    $sim = "qemu" if !defined $sim;
     $debug = "none" if !defined $debug;
     $vga = exists ($ENV{DISPLAY}) ? "window" : "none" if !defined $vga;
 
@@ -256,7 +256,7 @@
 sub find_disks {
     # Find kernel, if we don't already have one.
     if (!exists $parts{KERNEL}) {
-	my $name = find_file ('kernel.bin');
+	my $name = find_file ('/home/raks/Pintos/src/threads/build/kernel.bin');
 	die "Cannot find kernel\n" if !defined $name;
 	do_set_part ('KERNEL', 'file', $name);
     }
@@ -620,7 +620,7 @@
       if $vga eq 'terminal';
     print "warning: qemu doesn't support jitter\n"
       if defined $jitter;
-    my (@cmd) = ('qemu');
+	my (@cmd) = ('qemu-system-i386');
     push (@cmd, '-hda', $disks[0]) if defined $disks[0];
     push (@cmd, '-hdb', $disks[1]) if defined $disks[1];
     push (@cmd, '-hdc', $disks[2]) if defined $disks[2];
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/utils/pintos-gdb Pintos/src/utils/pintos-gdb
--- Downloads/pintos/src/utils/pintos-gdb	2012-09-27 06:08:38.000000000 +0530
+++ Pintos/src/utils/pintos-gdb	2019-01-11 10:46:17.492000000 +0530
@@ -1,7 +1,8 @@
 #! /bin/sh
 
 # Path to GDB macros file.  Customize for your site.
-GDBMACROS=/usr/class/cs140/pintos/pintos/src/misc/gdb-macros
+#GDBMACROS=/usr/class/cs140/pintos/pintos/src/misc/gdb-macros
+GDBMACROS=/home/raks/Pintos/src/misc/gdb-macros
 
 # Choose correct GDB.
 if command -v i386-elf-gdb >/dev/null 2>&1; then
diff -Naur -x build -x '*.o' -x '*.bin' -x .vscode -x .git Downloads/pintos/src/utils/Pintos.pm Pintos/src/utils/Pintos.pm
--- Downloads/pintos/src/utils/Pintos.pm	2012-09-27 06:08:38.000000000 +0530
+++ Pintos/src/utils/Pintos.pm	2019-01-11 10:56:42.128000000 +0530
@@ -359,7 +359,7 @@
 # Makes sure that the loader is a reasonable size.
 sub read_loader {
     my ($name) = @_;
-    $name = find_file ("loader.bin") if !defined $name;
+    $name = find_file ("/home/raks/Pintos/src/threads/build/loader.bin") if !defined $name;
     die "Cannot find loader\n" if !defined $name;
 
     my ($handle);
