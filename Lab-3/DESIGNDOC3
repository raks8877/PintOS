        +---------------------------+
        |          E0-253           |
        | PROJECT 3: VIRTUAL MEMORY |
        |     DESIGN DOCUMENT       |
        +---------------------------+

---- GROUP ----

>> Fill in your name and email address.

Rakesh Beck <rakeshbeck@iisc.ac.in>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

      PAGE TABLE MANAGEMENT
      =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
  
  threads/thread.h
  struct supply_page_table *supply; 

  vm/frame.h
  static struct lock frame_lock; //for synchronization
  static struct hash frame_map; //mapping between virtual to physical address
  
  struct frame_table_entry
  {
      bool pinned;          //to avoid eviction               
      struct thread *t;     //which thread is using frame     
      void *kpage;          //kernel page
      void *upage;          //virtual address     
      struct hash_elem helem;    //list element for hash table
      struct list_elem lelem;    //list element for frame list
  };

  vm/page.h
  struct supply_PTE
  {
    bool dirty;           //dirty bit
    void *upage;          //virtual address
    void *kpage;          //kernel page
    struct file *file;    //file the page was read from
    off_t file_offset;     //offset from the page was read
    uint32_t read_bytes, zero_bytes;  //keeping track of count
    bool writable;
    
    uint32_t swap_index;  //indicates the sector it has been swapped on to
    enum page_status status; //status of the page

    struct hash_elem elem; //list element for hash table
  };

  //different status of page
  enum page_status 
  {
    ALL_ZERO,
    ON_FRAME,
    ON_SWAP, 
    FROM_FILESYS
  };


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

  For allocating new frame, vm_frame_allocate is called.

  first it tries to get a new frame.
  if it is not able to get a new frame:
     then it will evict some page using clock algorithm.
     then it will set swap,dirty data in supplementary page table and 
     will clear the page.
     now the yes part will execute to store further information.
  if yes:
    then it will create and store data in frame table entry and insert it into
    frame hash table

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

  User virtual address are checked to be valid and these are used to access supplementary page table. 
  Kernel address is not used for the memory.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

  There is a global frame_lock which is used whenever any operation is performed using frame.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
  
  Since physical memory are unique so there won't be any collision if hash maps are used. 
  Also hashmaps have faster access as compared to link lists.

           PAGING TO AND FROM DISK
           =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  static struct block *swap_block; //where swapped pages are read from and written to

  static struct bitmap *swap_available; //indicated if a page is occupying 
                                        //the disk at contiguous sectors or contiguous 
                                        //sectors are free for swapping


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

  Clock page replacement is used to evict the page. The candidate pages for removal are 
  considered in a round robin matter, and a page that has been accessed between consecutive 
  considerations will not be replaced. Pages which are pinned are also not selected for eviction.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

  P can obtains a frame previously used by process Q only after
  clearing mapping of pagedir, swapping that page to disk and removing entry from frame's hash table.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
  
  Both condition should be satisfied 
  fault address should lie in the stack space i.e within 8mb
  (fault_addr < PHYS_BASE && fault_addr >= PHYS_BASE - MAX_STACK_SIZE)

  fault address should be in the stack frame or greater than esp - 32 due to PUSHA instruction
  (fault_addr >= f->esp - 32 || esp <= fault_addr)


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
  
  Page pinning is used for synchronization. Pinned pages are not evicted.
  After accessing that page, page is unpinned so that it can be evicted.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

  Lock is used to avoid race condition. Q cannot operate on the frame if P 
  has the lock. After P has completed eviction, Q will do page fault and bring 
  back the frame.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
  
  Page pinning is used to ensure Q cannot interfere. Whichever process will
  pin the page first will be able to complete its task.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

  pages are preloaded and pinned before the syscall.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

  Due to limited time I am using single lock to make synchronization easy. 
  This approach is limited and will fail during infinite recursion of frame eviction.
  when using multiple threads during make check, some test case fails randomly.

       MEMORY MAPPED FILES
       ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
  
  threads/thread.h
    struct list mmap_list;   

  userprog/process.h
  struct mmap_table 
  {
    int id;
    size_t size;   //file size
    struct file* file;
    void *addr;           //stores user virtual address
    struct list_elem elem; //list element for mmap_list
  };

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

  Each thread has a mmap file list. Files are lazily loaded and are inserted 
  into this list. Each files are maintained inside mmap_table structure.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

  If process's spte hash table has a entry then it means that files are already mapped.
  If not then files are mapped page by page.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

    Both share the code.
    Some parameters are NULL, this helps to distinguish between both calls.
    
         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?


